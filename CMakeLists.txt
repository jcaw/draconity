cmake_minimum_required(VERSION 3.10.0)

project(draconity)
set(CMAKE_MACOSX_RPATH 1)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
set(CMAKE_SKIP_BUILD_RPATH TRUE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

include_directories(src)
if (ASAN)
    add_definitions(-fsanitize=address)
    link_libraries("-fsanitize=address")
endif()
if (DEBUG OR ASAN)
    add_definitions(-O0 -ggdb -fno-omit-frame-pointer)
else()
    add_definitions(-O2)
endif()

find_path(BSON_INCLUDE libbson-1.0/bson.h)
set(BSON_INCLUDE ${BSON_INCLUDE}/libbson-1.0)
find_library(BSON NAMES libbson-static-1.0.a)
if (NOT BSON OR NOT BSON_INCLUDE)
    message(FATAL_ERROR "libbson not found")
endif()
find_path(ZYDIS_INCLUDE Zydis/Zydis.h)
find_library(ZYDIS NAMES libzydis.a zydis Zydis)
if (NOT ZYDIS OR NOT ZYDIS_INCLUDE)
    message(FATAL_ERROR "libzydis not found")
endif()
find_library(UV NAMES libuv.a)
if (NOT UV)
    message(FATAL_ERROR, "libuv not found")
endif()
include_directories(${BSON_INCLUDE} ${ZYDIS_INCLUDE} vendor/uvw/src)

file(GLOB_RECURSE SOURCE src/*.c src/*.cpp)
add_library(draconity SHARED ${SOURCE})
target_link_libraries(draconity m pthread ${UV} ${ZYDIS} ${BSON})
if(APPLE)
    include_directories(/usr/local/include)
    target_link_libraries(draconity -F/System/Library/PrivateFrameworks "-framework CoreSymbolication -framework AppKit")
endif()
if(MINGW)
    target_link_libraries(draconity ws2_32 psapi iphlpapi userenv)
endif()

set_target_properties(draconity PROPERTIES
    CXX_STANDARD 17
    CXX_EXTENSIONS OFF
)
